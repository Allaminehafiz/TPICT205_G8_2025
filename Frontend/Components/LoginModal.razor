@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime Js

<div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-md">
    <div class="modal-content">
      <div class="modal-header bg-success text-white">
        <h5 class="modal-title"><i class="fas fa-sign-in-alt"></i> Connexion</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
          <DataAnnotationsValidator />
          <ValidationSummary />

          <div class="mb-3">
            <label class="form-label fw-bold">Rôle</label>
            <InputSelect class="form-select" @bind-Value="loginModel.Role">
              <option value="">-- Choisissez un rôle --</option>
              <option value="Etudiant">Étudiant</option>
              <option value="Administrateur">Administrateur</option>
              <option value="Jury">Jury</option>
            </InputSelect>
          </div>

          <div class="mb-3">
            <label class="form-label fw-bold">
              @(loginModel.Role == "Etudiant" ? "Nom d'utilisateur ou Matricule" : "Nom d'utilisateur ou Email")
            </label>
            <InputText class="form-control" @bind-Value="loginModel.Identifier" required />
          </div>

          <div class="mb-3">
            <label class="form-label fw-bold">Mot de passe</label>
            <InputText class="form-control" @bind-Value="loginModel.Password" type="password" required />
          </div>

          <button type="submit" class="btn btn-success w-100"><i class="fas fa-sign-in-alt"></i> Se connecter</button>
        </EditForm>
      </div>
    </div>
  </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();

    private async Task HandleLogin()
{
    var response = await Http.PostAsJsonAsync("auth/login", loginModel);
    if (response.IsSuccessStatusCode)
    {
        var userData = await response.Content.ReadFromJsonAsync<UserSession>();
        await Js.InvokeVoidAsync("bootstrap.Modal.getInstance", "#loginModal", "hide");

        Navigation.NavigateTo(userData.Role == "Etudiant" ? "/student-profile" :
                              userData.Role == "Administrateur" ? "/admin-dashboard" : "/jury-dashboard");
    }
}


    public class LoginModel
    
    { 
        public string Identifier { get; set; }= string.Empty;
        public string Password { get; set; } = string.Empty;
        public string Role { get; set; }= string.Empty;
    }
    public class UserSession
    { 
        public string Role { get; set; }= string.Empty;
    }
}
